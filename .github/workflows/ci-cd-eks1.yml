name: Build, Push Images and Deploy to EKS (GitOps via Argo CD)

on:
  permissions:
    contents: write
  push:
    branches:
      - main
  workflow_dispatch: {}

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: 590183739327.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  BACKEND_REPO: backend
  FRONTEND_REPO: frontend
  K8S_NAMESPACE: hike
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}

jobs:
  ci:
    name: "Build & Test (CI)"
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: customerdb
        ports:
          - "3306:3306"
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -prootpassword"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      # Backend (Maven)
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Build Backend
        run: mvn -B -f backend/pom.xml clean install

      # Frontend (React)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Frontend
        working-directory: frontend
        run: |
          if [ -f package-lock.json ]; then
            echo "Using npm ci"
            npm ci
          else
            echo "No lockfile, using npm install"
            npm install
          fi

      # SonarQube Analysis (requires secret SONAR_TOKEN and valid sonar.host.url in Maven/command)
      - name: SonarQube Scan
        run: mvn -f backend/pom.xml sonar:sonar -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  build-and-push:
    name: "Build & Push images"
    runs-on: ubuntu-latest
    needs: ci

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push backend image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t backend:latest ./backend
          docker tag backend:latest $ECR_REGISTRY/${{ env.BACKEND_REPO }}:latest
          docker tag backend:latest $ECR_REGISTRY/${{ env.BACKEND_REPO }}:${IMAGE_TAG}
          docker push $ECR_REGISTRY/${{ env.BACKEND_REPO }}:latest
          docker push $ECR_REGISTRY/${{ env.BACKEND_REPO }}:${IMAGE_TAG}

      - name: Build & push frontend image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t frontend:latest ./frontend
          docker tag frontend:latest $ECR_REGISTRY/${{ env.FRONTEND_REPO }}:latest
          docker tag frontend:latest $ECR_REGISTRY/${{ env.FRONTEND_REPO }}:${IMAGE_TAG}
          docker push $ECR_REGISTRY/${{ env.FRONTEND_REPO }}:latest
          docker push $ECR_REGISTRY/${{ env.FRONTEND_REPO }}:${IMAGE_TAG}

  bump-tags-and-let-argocd-sync:
    name: "Commit image tags (GitOps deploy via Argo CD)"
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - uses: actions/checkout@v4

      - name: Install yq
        uses: mikefarah/yq@v4.44.3

      - name: Bump image tags in Kustomize and commit
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -e
          git config user.name "github-actions"
          git config user.email "actions@github.com"

          echo "Updating backend image tag to ${IMAGE_TAG}"
          # Update the 'newTag' for the matching image in k8s/backend/kustomization.yaml
          yq -i '
            (.images[] | select(.name == "'$ECR_REGISTRY'/'$BACKEND_REPO'") ).newTag = env(IMAGE_TAG)
          ' k8s/backend/kustomization.yaml

          echo "Updating frontend image tag to ${IMAGE_TAG}"
          # Update the 'newTag' for the matching image in k8s/frontend/kustomization.yaml
          yq -i '
            (.images[] | select(.name == "'$ECR_REGISTRY'/'$FRONTEND_REPO'") ).newTag = env(IMAGE_TAG)
          ' k8s/frontend/kustomization.yaml

          git add k8s/backend/kustomization.yaml k8s/frontend/kustomization.yaml
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore(cd): bump images to ${IMAGE_TAG}"
            git push
          fi

      # Optional: If you want to trigger an immediate sync via Argo CD API
      # - name: Trigger Argo CD sync (optional)
      #   if: ${{ secrets.ARGOCD_SERVER && secrets.ARGOCD_TOKEN }}
      #   run: |
      #     curl -k -X POST "https://${{ secrets.ARGOCD_SERVER }}/api/v1/applications/backend/sync" \
      #       -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}"
      #     curl -k -X POST "https://${{ secrets.ARGOCD_SERVER }}/api/v1/applications/frontend/sync" \
      #       -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}"
