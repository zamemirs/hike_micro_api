name: Build, Push Images and Deploy to EKS

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: 590183739327.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  BACKEND_REPO: backend
  FRONTEND_REPO: frontend
  K8S_NAMESPACE: hike
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}

jobs:
  ci:
    name: "Build & Test (CI)"
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: customerdb
        ports:
          - "3306:3306"
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -prootpassword"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      # Backend (Maven)
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Build Backend
        run: mvn -B -f backend/pom.xml clean install

      # Frontend (React)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Frontend
        working-directory: frontend
        run: npm install

      # SonarQube Analysis (requires secrets: SONAR_TOKEN)
      - name: SonarQube Scan
        run: mvn -f backend/pom.xml sonar:sonar -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  build-and-push:
    name: "Build & Push images"
    runs-on: ubuntu-latest
    needs: ci

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push backend image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t backend:latest ./backend
          docker tag backend:latest $ECR_REGISTRY/${{ env.BACKEND_REPO }}:latest
          docker tag backend:latest $ECR_REGISTRY/${{ env.BACKEND_REPO }}:${IMAGE_TAG}
          docker push $ECR_REGISTRY/${{ env.BACKEND_REPO }}:latest
          docker push $ECR_REGISTRY/${{ env.BACKEND_REPO }}:${IMAGE_TAG}

      - name: Build & push frontend image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t frontend:latest ./frontend
          docker tag frontend:latest $ECR_REGISTRY/${{ env.FRONTEND_REPO }}:latest
          docker tag frontend:latest $ECR_REGISTRY/${{ env.FRONTEND_REPO }}:${IMAGE_TAG}
          docker push $ECR_REGISTRY/${{ env.FRONTEND_REPO }}:latest
          docker push $ECR_REGISTRY/${{ env.FRONTEND_REPO }}:${IMAGE_TAG}

  deploy-to-eks:
    name: "Deploy to EKS (namespace hike)"
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check AWS identity
        run: aws sts get-caller-identity

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kubeconfig for EKS cluster
        run: |
          aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
          kubectl config current-context

      - name: Update backend deployment image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          kubectl -n $K8S_NAMESPACE set image deployment/backend backend=$ECR_REGISTRY/${{ env.BACKEND_REPO }}:${IMAGE_TAG}
          kubectl -n $K8S_NAMESPACE rollout status deployment/backend --timeout=120s

      - name: Update frontend deployment image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          kubectl -n $K8S_NAMESPACE set image deployment/frontend frontend=$ECR_REGISTRY/${{ env.FRONTEND_REPO }}:${IMAGE_TAG}
          kubectl -n $K8S_NAMESPACE rollout status deployment/frontend --timeout=120s

      - name: Verify namespace resources
        run: |
          kubectl -n $K8S_NAMESPACE get deploy,po,svc